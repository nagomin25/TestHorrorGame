#include "EnemyAIController.h"
#include "BehaviorTree/BlackboardComponent.h"
#include "BehaviorTree/BehaviorTree.h"
#include "BehaviorTree/BlackboardData.h"
#include "GameFramework/Character.h"
#include "Engine/Engine.h"
#include "Perception/AIPerceptionComponent.h"
#include "Perception/AISenseConfig_Sight.h"
#include "../TestHorrorGameCharacter.h"

AEnemyAIController::AEnemyAIController()
{
	PrimaryActorTick.bCanEverTick = true;

	// Blackboard Component (inherited from AIController)
	// BehaviorTreeComponent (inherited from AIController)

	// AI Perception Component
	AIPerceptionComponent = CreateDefaultSubobject<UAIPerceptionComponent>(TEXT("AIPerceptionComponent"));

	// Sight Configuration - „Çà„ÇäË≥¢„ÅÑËøΩË∑°Ë®≠ÂÆö
	SightConfig = CreateDefaultSubobject<UAISenseConfig_Sight>(TEXT("SightConfig"));
	if (SightConfig)
	{
		SightConfig->SightRadius = 2000.0f;          // Ë¶ñÁïåË∑ùÈõ¢„ÇíÊã°Â§ß
		SightConfig->LoseSightRadius = 2200.0f;      // Ë¶ãÂ§±„ÅÜË∑ùÈõ¢„ÇÇÊã°Â§ß
		SightConfig->PeripheralVisionAngleDegrees = 120.0f; // Ë¶ñÈáéËßí„ÇíÊã°Â§ß
		SightConfig->SetMaxAge(10.0f);               // Ë®òÊÜ∂ÊôÇÈñì„ÇíÂ§ßÂπÖÂª∂Èï∑
		SightConfig->AutoSuccessRangeFromLastSeenLocation = 800.0f; // ÊúÄÂæå„Å´Ë¶ã„Åü‰ΩçÁΩÆÂë®Ëæ∫„Åß„ÅÆËá™ÂãïÊ§úÂá∫„ÇíÊã°Â§ß
		
		// Player detection
		SightConfig->DetectionByAffiliation.bDetectNeutrals = true;
		SightConfig->DetectionByAffiliation.bDetectFriendlies = true;
		SightConfig->DetectionByAffiliation.bDetectEnemies = true;

		AIPerceptionComponent->SetDominantSense(*SightConfig->GetSenseImplementation());
		AIPerceptionComponent->ConfigureSense(*SightConfig);
	}

	// Set up perception events
	AIPerceptionComponent->OnPerceptionUpdated.AddDynamic(this, &AEnemyAIController::OnPerceptionUpdated);

	// Initialize Blackboard Keys
	TargetPlayerKey = TEXT("TargetPlayer");
	LastKnownLocationKey = TEXT("LastKnownLocation");
	IsChasing = TEXT("IsChasing");
	CanAttack = TEXT("CanAttack");

	// Set default assets
	static ConstructorHelpers::FObjectFinder<UBehaviorTree> BTAsset(TEXT("/Game/BT_Enemy"));
	if (BTAsset.Succeeded())
	{
		BehaviorTreeAsset = BTAsset.Object;
	}
	
	static ConstructorHelpers::FObjectFinder<UBlackboardData> BBAsset(TEXT("/Game/BB_Enemy"));
	if (BBAsset.Succeeded())
	{
		BlackboardAsset = BBAsset.Object;
	}
}

void AEnemyAIController::BeginPlay()
{
	Super::BeginPlay();

	// Start Behavior Tree
	if (BlackboardAsset && BehaviorTreeAsset)
	{
		RunBehaviorTree(BehaviorTreeAsset);
	}
	else
	{
		UE_LOG(LogTemp, Warning, TEXT("‚ùå EnemyAIController: BehaviorTreeAsset or BlackboardAsset not set!"));
	}
}

void AEnemyAIController::OnPossess(APawn* InPawn)
{
	Super::OnPossess(InPawn);

	// Initialize Blackboard
	if (BlackboardAsset)
	{
		// Use the blackboard
		if (Blackboard)
		{
			Blackboard->InitializeBlackboard(*BlackboardAsset);
		}
		
		// Initialize blackboard values
		if (GetBlackboardComponent())
		{
			GetBlackboardComponent()->SetValueAsBool(IsChasing, false);
			GetBlackboardComponent()->SetValueAsBool(CanAttack, false);
		}
	}
	else
	{
		UE_LOG(LogTemp, Error, TEXT("‚ùå EnemyAIController: BlackboardAsset not set!"));
	}

	UE_LOG(LogTemp, Warning, TEXT("ü§ñ EnemyAIController possessed pawn: %s"), *InPawn->GetName());
}

void AEnemyAIController::OnPerceptionUpdated(const TArray<AActor*>& UpdatedActors)
{
	for (AActor* Actor : UpdatedActors)
	{
		// „Éó„É¨„Ç§„É§„Éº„Ç≠„É£„É©„ÇØ„Çø„Éº„ÇíÊ§úÂá∫
		if (ATestHorrorGameCharacter* Player = Cast<ATestHorrorGameCharacter>(Actor))
		{
			FActorPerceptionBlueprintInfo Info;
			AIPerceptionComponent->GetActorsPerception(Actor, Info);

			bool bPlayerCurrentlyVisible = false;
			for (const FAIStimulus& Stimulus : Info.LastSensedStimuli)
			{
				if (Stimulus.WasSuccessfullySensed())
				{
					bPlayerCurrentlyVisible = true;
					
					// „Éó„É¨„Ç§„É§„Éº„ÅåË¶ñÁïåÂÜÖ„Å´„ÅÑ„ÇãÂ†¥Âêà
					if (!GetBlackboardComponent()->GetValueAsBool(IsChasing))
					{
						UE_LOG(LogTemp, Warning, TEXT("üëÅÔ∏è Enemy detected player: %s"), *Player->GetName());
					}
					
					StartChasing(Player);
					
					// „Éó„É¨„Ç§„É§„Éº„ÅÆÁèæÂú®‰ΩçÁΩÆ„ÇíÊØé„Éï„É¨„Éº„É†Êõ¥Êñ∞ÔºàË¶ñÁïåÂÜÖ„Å´„ÅÑ„ÇãÈôê„ÇäÔºâ
					FVector PlayerCurrentLocation = Player->GetActorLocation();
					GetBlackboardComponent()->SetValueAsVector(LastKnownLocationKey, PlayerCurrentLocation);
					
					// „É™„Ç¢„É´„Çø„Ç§„É†„ÅßÁõ¥Êé•„Éó„É¨„Ç§„É§„Éº„Å´Âêë„Åã„Å£„Å¶ÁßªÂãï
					MoveToLocation(PlayerCurrentLocation, 50.0f, true, true, true, true);
					
					// ÊîªÊíÉË∑ùÈõ¢„ÅÆÊõ¥Êñ∞ÔºàÂØÜÁùÄÊîªÊíÉÁî®„Å´Á∏ÆÂ∞èÔºâ
					float DistanceToTarget = FVector::Dist(GetPawn()->GetActorLocation(), PlayerCurrentLocation);
					GetBlackboardComponent()->SetValueAsBool(CanAttack, DistanceToTarget <= 150.0f);
					
					// „Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞ - „Çà„ÇäË©≥Á¥∞„Å™ËøΩË∑°ÊÉÖÂ†±
					static int32 TrackingLogCount = 0;
					if (++TrackingLogCount % 60 == 0) // 1Áßí„Åä„Åç„Å´Ë°®Á§∫
					{
						UE_LOG(LogTemp, Warning, TEXT("üéØ Continuously tracking player - Distance: %.1f, Moving to: %s"), 
							DistanceToTarget, *PlayerCurrentLocation.ToString());
					}
					
					break; // „Éó„É¨„Ç§„É§„Éº„ÇíÁô∫Ë¶ã„Åó„Åü„Çâ„É´„Éº„Éó„ÇíÊäú„Åë„Çã
				}
			}
			
			if (!bPlayerCurrentlyVisible)
			{
				// „Éó„É¨„Ç§„É§„Éº„ÇíË¶ãÂ§±„Å£„ÅüÂ†¥Âêà - „Åü„Å†„ÅóË®òÊÜ∂ÊôÇÈñìÂÜÖ„ÅØËøΩË∑°Á∂ôÁ∂ö
				UE_LOG(LogTemp, Warning, TEXT("üëÅÔ∏è Enemy lost sight of player - but continuing pursuit to last known location"));
				
				// Ë¶ãÂ§±„Å£„Å¶„ÇÇ„Åô„Åê„Å´„ÅØËøΩË∑°„ÇíÂÅúÊ≠¢„Åó„Å™„ÅÑÔºàË®òÊÜ∂ÊôÇÈñì„Å´‰æùÂ≠òÔºâ
				// Blackboard„ÅÆÂÄ§„ÅØÁ∂≠ÊåÅ„Åó„ÄÅBehavior Tree„ÅßÊúÄÂæå„ÅÆ‰ΩçÁΩÆ„Å∏„ÅÆÁßªÂãï„ÇíÁ∂ôÁ∂ö
			}
		}
	}
}

void AEnemyAIController::StartChasing(AActor* Target)
{
	if (GetBlackboardComponent())
	{
		GetBlackboardComponent()->SetValueAsObject(TargetPlayerKey, Target);
		GetBlackboardComponent()->SetValueAsBool(IsChasing, true);
		GetBlackboardComponent()->SetValueAsVector(LastKnownLocationKey, Target->GetActorLocation());

		// ÊîªÊíÉË∑ùÈõ¢ÂÜÖ„Åã„ÉÅ„Çß„ÉÉ„ÇØÔºàÂØÜÁùÄÊîªÊíÉÁî®„Å´Á∏ÆÂ∞èÔºâ
		float DistanceToTarget = FVector::Dist(GetPawn()->GetActorLocation(), Target->GetActorLocation());
		GetBlackboardComponent()->SetValueAsBool(CanAttack, DistanceToTarget <= 150.0f);

		UE_LOG(LogTemp, Warning, TEXT("üèÉ‚Äç‚ôÇÔ∏è Enemy started chasing: %s (Distance: %.1f) CanAttack: %s"), 
			*Target->GetName(), DistanceToTarget, DistanceToTarget <= 150.0f ? TEXT("YES") : TEXT("NO"));
	}
}

void AEnemyAIController::StopChasing()
{
	if (GetBlackboardComponent())
	{
		GetBlackboardComponent()->SetValueAsObject(TargetPlayerKey, nullptr);
		GetBlackboardComponent()->SetValueAsBool(IsChasing, false);
		GetBlackboardComponent()->SetValueAsBool(CanAttack, false);

		UE_LOG(LogTemp, Warning, TEXT("‚èπÔ∏è Enemy stopped chasing"));
	}
}

AActor* AEnemyAIController::GetTargetPlayer() const
{
	if (GetBlackboardComponent())
	{
		return Cast<AActor>(GetBlackboardComponent()->GetValueAsObject(TargetPlayerKey));
	}
	return nullptr;
}